name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}    # setup as part of variabe for the repo
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}   # setup as part of secret variable for the repo
  
    
jobs:
    unit-testing:
        name: Unit Testing
        services:
          # Label used to access the service container
          mongo-db:
            # Docker Hub image
            image: siddharth67/mongo-db:non-prod
            ports: 
              - 27017:27017

        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user    # setup as part of variabe for the repo
          MONGO_PASSWORD: non-prod-password   # setup as part of secret variable for the repo
  
        strategy:
          matrix:
            os: [ubuntu-latest]
            nodejs_version: [18]
        runs-on: ${{matrix.os }}
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version  }}

        # Cacheing dependencies, whenever json file changes new cache will be created
        # cached which were part of package.json - this hash key changes whenever you modify package.json file
        - name: Cache NPM dependencies
          # id: cache-npm
          uses: actions/cache@v4
          env:
            cache-name: cache-node-modules
          with:
            # npm cache files are stored in `~/.npm` on Linux/macOS
            path: node_modules
            key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    
        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          id: nodejs-unit-test-result
          run: npm test
          
        - name: Archive Test Result
          # if: failure() && (steps.nodejs-unit-test-result.outcome == 'failure' || steps.nodejs-unit-test-result.outcome == 'success') # it executes only  if previous step fails
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result
            path: test-results.xml
            if-no-files-found: error # 'warn' or 'ignore' are also available, defaults `warn`


    code-coverage:
        name: Code Coverage
        container: 
            image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            # port mapping not required as all ports are open between the jobs
            options: 
                --name mongo
        env:
            MONGO_URI: 'mongodb://mongo:27017/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 18
        
        # Cacheing dependencies, whenever json file changes new cache will be created
        # cached which were part of package.json - this hash key changes whenever you modify package.json file
        - name: Cache NPM dependencies
          # id: cache-npm
          uses: actions/cache@v4
          env:
            cache-name: cache-node-modules
          with:
            # npm cache files are stored in `~/.npm` on Linux/macOS
            path: node_modules
            key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    
        - name: Install Dependencies
          run: npm install
        
        - name: check code coverage
          continue-on-error: true   # if job fails also it continnues the flow and shows failure in Annotation
          run: npm run coverage
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: code-coverage-result
            path: coverage
            retention-days: 1    # coverage file deletes after 1 day

    docker:
      name: Containerization
      needs: [code-coverage, unit-testing]
      permissions:
        packages: write
      runs-on: ubuntu-latest
      steps:
        # checking out to repo
        - name: Checkout Repository
          uses: actions/checkout@v4
        # login to docker
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        # login to ghcr
        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}  # GITHUB_TOKEN created automatically & expires once job finishes

        - name: Docker Build For Testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d  \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP
            
            echo Testing Image URL using wget 
            wget -q -O - 127.0.0.1:3000/live | grep live

          # We can mention multiple registeries here to push to registries
        - name: Container Registry Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

                
    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      steps:
        # checking out to repo
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: install kubectl CLI
          uses: azure/setup-kubectl@v4
          with:
            version: 'v1.26.0' # default is latest stable
          
        - name: fetch kuberneters cluster details
          run: |
            kubectl version --short
            echo -------------------------------------------------
              kubectl get nodes

